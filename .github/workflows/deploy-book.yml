name: deploy-book

# Based on:
# https://jupyterbook.org/en/stable/publish/gh-pages.html

on:
  workflow_call:

# Inherit configuration variables in the environment, or assign default values.
# Configuration variables may be set as explained here:
# https://docs.github.com/en/actions/learn-github-actions/variables#creating-configuration-variables-for-a-repository
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Relevant and required for Private repositories only!
  # 1. First, create a Personal Access Token (Classic) as in https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
  #    with at least the scopes `repo`, `read:org`, and `gist`.
  # 2. Then, make a secret GH_PAT in `Settings` > `Secrets and variables` > `Actions` > `Repository secrets` or `Organization secrets`.
  #    Copy & paste the PAT from step 1.
  #
  # Clarifications on naming:
  # GH_TOKEN is the name that the `gh` CLI utility expects.
  # GITHUB_TOKEN is a special automatically assigned token described here https://docs.github.com/en/actions/security-guides/automatic-token-authentication
  GH_TOKEN: ${{ secrets.GH_PAT != '' && secrets.GH_PAT || secrets.GITHUB_TOKEN }}
  
  # Branch shown on root (eg. teachbooks.github.io/template/).
  # `main` as primary by default, advised to use branch with most recent content.
  PRIMARY_BRANCH: ${{ vars.PRIMARY_BRANCH != '' && vars.PRIMARY_BRANCH || 'main' }}

  # If to copy the PRIMARY_BRANCH to root ('copy') or redirect from root to the PRIMARY_BRANCH ('redirect')
  # By default, redirects to PRIMARY_BRANCH ('redirect')
  # Advised to use redirect if you expect to archive a version in the future so that the URL doesn't change for the reader
  BEHAVIOR_PRIMARY: ${{ vars.BEHAVIOR_PRIMARY != '' && vars.BEHAVIOR_PRIMARY || 'redirect' }}

  # Release branch to custom url with an alias
  # Space-separated list of branch names, e.g. 'draft:main'
  # By default, no aliases are defined (''). 
  # If no alias is wanted, BRANCH_ALIASES may be set to ' ' (space).
  BRANCH_ALIASES: ${{ vars.BRANCH_ALIASES }}

  # Which branches to release
  # Space-separated list of branch names, e.g. 'main second third'.
  # By default, deploy all branches. This is indicated by '*'.
  BRANCHES_TO_DEPLOY: ${{ vars.BRANCHES_TO_DEPLOY != '' && vars.BRANCHES_TO_DEPLOY || '*' }}

  # Preprocessing is described here: (as described here: https://teachbooks.github.io/TeachBooks/cli/cli.html#teachbooks-build)
  # Space-separated list of branch names, e.g. 'main second third'.
  # By default, preprocess no branches ('').
  # Preprocessing no branches can also be set by ' '.
  BRANCHES_TO_PREPROCESS: ${{ vars.BRANCHES_TO_PREPROCESS }}

  # Add banner to released branch: You are viewing an archived version of the book. Click here (link to root) for the latest version.
  # Space-separated list of branch names, e.g. 'main second third'.
  # By default, archives no branches (' ')
  # Note: does not support '*'
  BRANCHES_ARCHIVED: ${{ vars.BRANCHES_ARCHIVED }}


jobs:
  get-branches:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-branches.outputs.branches }}
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - id: set-branches
      name: Set branches
      run: |
        # If all (*), query all remote branches
        # If not, read from env var
        if [ "$BRANCHES_TO_DEPLOY" == '*' ]; then
          branches=$(git branch -r | sed 's,\s*origin/,,g' | grep -v '\->')
        else
          branches=$(echo "$BRANCHES_TO_DEPLOY" | tr ' ' '\n' | grep -E '\S')
        fi
        
        # Fetch all open pull requests from forks and include their branches
        pr_branches=$(gh pr list --state open --json number,headRefName,isCrossRepository --jq '.[] | select(.isCrossRepository) | "refs/pull/" + (.number|tostring) + "/merge"')
        branches=$(echo -e "$branches\n$pr_branches" | grep -E '\S')
        
        # Record branch names (one per line) for alias validation
        echo "$branches" | tr ' ' '\n' > branches.txt

        # Convert to a JSON list
        branches=$(echo "$branches" | jq -Rn '[inputs]')
        echo "branches=$(echo $branches)" >> "$GITHUB_OUTPUT"

    - name: Validate aliases
      run: |
        # Prepare data
        echo "$BRANCH_ALIASES" | tr ' ' '\n' > rules.txt
        cut -d: -f1 rules.txt > aliases.txt
        cut -d: -f2 rules.txt > targets.txt

        # Alias named as existing branch
        if grep -E '\S' aliases.txt; then
          while IFS= read -r alias; do
            if grep "^$alias$" branches.txt ; then
              echo "::error ::Alias \"$alias\" given in \$BRANCH_ALIASES conflicts with existing branch."
              exit 1
            fi
          done < aliases.txt
        fi

        # Non-existent targets
        if grep -E '\S' targets.txt; then
          while IFS= read -r target; do
            if ! grep "^$target$" branches.txt ; then
              echo "::error ::Branch \"$target\" given in \$BRANCH_ALIASES does not exist."
              exit 1
            fi
          done < targets.txt
        fi

        # Duplicate aliases
        if { sort | uniq -d | grep . -qc; } < aliases.txt; then
          echo "::error ::Duplicate aliases in \$BRANCH_ALIASES: \"$BRANCH_ALIASES\""
          exit 1
        fi


  build-books:
    runs-on: ubuntu-latest
    needs: get-branches
    if: ${{ needs.get-branches.outputs.branches != '[]' }}
    permissions:
      pages: write
      id-token: write
      contents: read
    strategy:
      # If one branch fails, we may still want to deploy the other
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.get-branches.outputs.branches) }}
    steps:
    - name: Checkout to branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}
        token: ${{ env.GH_TOKEN }}
        submodules: 'true'

    - name: Record extra cache info
      run: |
        # Record filenames listing -- this updates the cache on filename change
        find book/ -type f >> EXTRA_CACHE_VARS.txt
        # Record if branch is preprocessed
        if [ "$BRANCHES_TO_PREPROCESS" == "*" ] || echo "$BRANCHES_TO_PREPROCESS" | tr ' ' '\n' | grep "^${{ matrix.branch }}$"; then
          echo true >> EXTRA_CACHE_VARS.txt
        else
          echo false >> EXTRA_CACHE_VARS.txt
        fi
        # Record if branch is archived
        if echo "$BRANCHES_ARCHIVED" | tr ' ' '\n' | grep "^${{ matrix.branch }}$"; then
          echo true >> EXTRA_CACHE_VARS.txt
        else
          echo false >> EXTRA_CACHE_VARS.txt
        fi
        cat EXTRA_CACHE_VARS.txt

    - name: Cache page build
      id: cache-html
      uses: actions/cache@v4
      with:
        path: "book/_build/html"
        key: html-build-${{ matrix.branch }}-${{ hashFiles('book/**', 'requirements.txt', 'EXTRA_CACHE_VARS.txt') }}

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Set up Python 3.11
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: 3.11

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Record current date for cache
      run: |
        echo "WEEK=$(date +%V)" >> $GITHUB_ENV

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Cache virtualenv
      uses: actions/cache@v4
      with:
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}-week${{ env.WEEK }}-${{ github.repository }}
        path: .venv

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install -r requirements.txt
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Insert banner if archived
      run: |
        if echo "$BRANCHES_ARCHIVED" | tr ' ' '\n' | grep "^${{ matrix.branch }}$"; then
          {
            url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
            echo 'html:'
            echo "  announcement: 'You are viewing an archived version of the book. Click <a href=\"$url$PRIMARY_BRANCH\">here</a> for the latest version.'"
          } >> book/_config.yml
          cat book/_config.yml
        fi

    - if: ${{ steps.cache-html.outputs.cache-hit != 'true' }}
      name: Preprocess & build the book from branch
      run: |
        if [ "$BRANCHES_TO_PREPROCESS" == "*" ] || echo "$BRANCHES_TO_PREPROCESS" | tr ' ' '\n' | grep "^${{ matrix.branch }}$"; then
          option_release='--publish'
        else
          option_release=''
        fi
        set -o pipefail
        # https://stackoverflow.com/a/692407
        teachbooks build $option_release book/ > >(tee stdout.log) 2> >(tee stderr.log >&2)
        set +o pipefail

    - name: If failed, restore a book for this branch from cache
      if: failure()
      id: attempt-restore
      uses: actions/cache/restore@v4
      with:
        key: none
        path: "book/_build/html"
        restore-keys: html-build-${{ matrix.branch }}

    - name: Debug cache attempt output
      if: failure()
      run: |
        echo cache-hit: ${{ steps.attempt-restore.outputs.cache-hit }}
        echo cache-primary-key: ${{ steps.attempt-restore.outputs.cache-primary-key }}
        echo cache-matched-key: ${{ steps.attempt-restore.outputs.cache-matched-key }}

    - name: Record build failure
      if: failure()
      run: |
        if [ -z "${{ steps.attempt-restore.outputs.cache-matched-key }}" ]; then
          # Cache miss
          echo ":o: \\\`Build failed [2]\\\`" | tee buildstatus.txt
        else
          # (Partial) cache hit
          echo ":red_circle: \\\`Build failed [1]\\\`" | tee buildstatus.txt
        fi

    - name: Record build success
      if: success()
      run: |
        echo ":white_check_mark: \\\`Released\\\`" >> buildstatus.txt

    - name: Make summary of errors, if any
      # run even in case of failure
      if: always()
      run: |
        # If there are warnings or errors, compose a summary (if not, don't)
        touch summary.md
        if [ -s stderr.log ]; then
          {
            echo "On branch \\\`${{ matrix.branch }}\\\`:"
            echo '\`\`\`'
            cat stderr.log
            echo '\`\`\`'
          } >> summary.md
        fi

    - name: Clean branch name of disallowed characters
      if: always()
      run: |
        if [[ "${{ matrix.branch }}" =~ refs/pull/([0-9]+)/merge ]]; then
          CLEAN_BRANCH_NAME="PR-${BASH_REMATCH[1]}"
        else
          CLEAN_BRANCH_NAME=$(echo "${{ matrix.branch }}" | tr '/":<>|*?\\' '-')
        fi
        echo "MATRIX_BRANCH_NAME_CLEAN=${CLEAN_BRANCH_NAME}" >> $GITHUB_ENV

    - name: Upload summary as an artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: _summary-${{ env.MATRIX_BRANCH_NAME_CLEAN }}
        path: "summary.md"

    - name: Upload build status as an artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: _buildstatus-${{ env.MATRIX_BRANCH_NAME_CLEAN }}
        path: "buildstatus.txt"

    - name: Upload the built book HTML as an artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.MATRIX_BRANCH_NAME_CLEAN }}
        path: "book/_build/html"

  deploy-books:
    # Run after build-books, even if it failed
    if: always()
    needs:
    - get-branches
    - build-books
    outputs:
      summary: ${{ steps.output-summary.outputs.summary }}
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    env:
      BRANCHES: ${{ needs.get-branches.outputs.branches }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ env.GH_TOKEN }}

    - run: |
        mkdir final/

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: "final/"

    - name: Extract extras from the downloaded artifacts
      run: |
        mkdir _summaries/
        mkdir _buildstatus/
        mv final/_summary-* _summaries
        mv final/_buildstatus-* _buildstatus

    - name: Clean artifacts (1)
      uses: GeekyEggo/delete-artifact@v5.0.0
      with:
        name: "_summary-*"

    - name: Clean artifacts (2)
      uses: GeekyEggo/delete-artifact@v5.0.0
      with:
        name: "_buildstatus-*"

    - name: Copy primary book to root, fail if names conflict
      timeout-minutes: 1
      if: ${{ env.BEHAVIOR_PRIMARY == 'copy' }}
      run: |
        GLOBIGNORE=".:.."
        # -i leads to a prompt in case of conflict, => a timeout
        if [ -d final/"$PRIMARY_BRANCH" ]; then
          cp -irv final/"$PRIMARY_BRANCH"/* final/
        fi

    - name: Include overview summary
      run: |
        # Restore "raw" branch names
        echo '${{ needs.get-branches.outputs.branches }}' | jq -r '.[]' > raw.txt
        {
          # Display raw/clean branch name versions in Actions Summary
          echo "### Branches deployed"
          ## Table headers
          echo "| Branch :tanabata_tree: | Link :link: | Build status :ballot_box_with_check:"
          echo "| :--- | :--- | :--- |"
        } >> summary.md

        ## Fetch the GH Pages URL
        # https://stackoverflow.com/a/76354104
        url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')

        # Clean normal branch names
        grep -v '^refs/pull/' raw.txt | tr '/":<>|*?\\' '-' > clean.txt

        # Include cleaned PR branches
        grep '^refs/pull/' raw.txt | sed 's|refs/pull/\([0-9]\+\)/merge|PR-\1|' >> clean.txt

        # Generate status.txt
        cat clean.txt | xargs -I{} cat _buildstatus/_buildstatus-{}/buildstatus.txt > status.txt
        
        # Combine raw, clean, and status into pasted.txt
        paste -d ';' raw.txt clean.txt status.txt > pasted.txt
        
        # Generate summary.md
        cat pasted.txt |
        while IFS=';' read -r raw clean status; do
          echo "| $raw | <$url$clean> | $status |" >> summary.md
        done

        primary_status=$(grep "^$PRIMARY_BRANCH;" pasted.txt | cut -d ';' -f3)

        {
          echo
          echo "#### Legend for build status"
          echo ":white_check_mark: \\\`Released\\\` - build success, new version released."
          echo ":red_circle: \\\`Build failed [1]\\\` - build failure, previous version of the book reused."
          echo ":o: \\\`Build failed [2]\\\` - build failure, no previous version reused."

          echo
          echo '#### Primary book at root'
          if [ ${{ env.BEHAVIOR_PRIMARY  }} == 'copy' ]; then
            echo "The book at the website root <$url> is from the primary branch \\\`$PRIMARY_BRANCH\\\`."
          elif [ ${{ env.BEHAVIOR_PRIMARY  }} == 'redirect' ]; then
            echo "The book at the website root <$url> redirects to the primary branch \\\`$PRIMARY_BRANCH\\\`."
          fi
          echo "Status: $primary_status"
        } >> summary.md

    - name: Symlink and summarise branch aliases
      id: symlink-aliases
      run: |
        echo "### Aliases" >> summary.md
        if echo "$BRANCH_ALIASES" | grep -E '\S'; then
            # Summary table headers
            {
              echo "| Alias :arrow_right: | Target :dart: | Link :link: | Build status :ballot_box_with_check: |"
              echo "| :--- | :--- | :--- | :--- |"
            } >> summary.md
        else
            echo "No aliases defined." >> summary.md
        fi

        url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')

        paste -d ' ' clean.txt status.txt > lookup_status.txt

        echo "$BRANCH_ALIASES" | tr ' ' '\n' | grep -E '\S' |
        while IFS=':' read -r key value; do
          # If the target branch is to be deployed, make symlink to it.
          if [ "$BRANCHES_TO_DEPLOY" == "*" ] || echo "$BRANCHES_TO_DEPLOY" | tr ' ' '\n' | grep "^$value$"; then
            # Clean branch names of special characters
            clean_key=$(echo "$key" | tr '/":<>|*?\/\\' '-')
            clean_value=$(echo "$value" | tr '/":<>|*?\/\\' '-')
            status=$(grep "^$clean_value " lookup_status.txt | cut -d\  -f2,3)
            echo "| $clean_key | $clean_value | <$url$clean_key> | $status |" >> summary.md
            ln -s "$clean_value" final/"$key"
          fi
        done

    - name: Include summary of errors
      run: |
        {
          echo "### Preview of build errors & warnings"
          echo "For more details please see the corresponding \\\`build-books\\\` jobs in the left pane."
        } >> summary.md
        for fname in _summaries/*; do
          echo $fname
          if [ "$fname" == 'summary.md' ]; then
            continue
          fi
          cat "$fname/summary.md" >> tmp.md
        done
        if [ -s tmp.md ]; then
          cat tmp.md >> summary.md
        else
          echo "No build errors or warnings encountered." >> summary.md
        fi

    - name: Add a custom 404 to redirect
      env:
        # https:(0)/(1)/uname.github.io(2)/rname(3)/bname(4) */
        # if urlParts.len < 4, bname is undefined */
        HTML_TEMPLATE_404_REDIRECT: |
          <!DOCTYPE html><title>Redirecting...</title>
          <body></body>
          <script>
          let currentUrl = window.location.href;
          let urlParts = currentUrl.split('/');
          console.log("urlParts before", urlParts);
          let bname = urlParts[4];
          console.log("bname", bname);
          let branches = $BRANCHES;
          console.log("branches", branches);
          if (!branches.includes(bname)) {
              urlParts.splice(4, 0, '$PRIMARY_BRANCH');
              console.log("urlParts after", urlParts);
              let newUrl = urlParts.join('/');
              window.location.href = newUrl;
          } else {
              document.title = "Page Not Found";
              document.body.innerHTML = "<h1>Page Not Found</h1>";
          }
          </script>
        # HTML_TEMPLATE_404_TRUE: |
        #   <!DOCTYPE html><title>404 Not Found</title>
        #   404 Not Found
      run: |
        # echo "$HTML_TEMPLATE_404_TRUE" > final/404-not-found.html
        echo "$HTML_TEMPLATE_404_REDIRECT" | envsubst | tee final/404.html

    - name: Upload final Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: "final/"

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    # source: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-a-multiline-string
    - name: Output summary
      id: output-summary
      run: |
        {
          echo 'summary<<EOF'
          cat summary.md
          echo EOF
        } >> "$GITHUB_OUTPUT"

  summarize:
    if: always()
    needs:
      - get-branches
      - deploy-books
    runs-on: ubuntu-latest
    steps:
    - name: Summarize
      run: |

        echo "${{ needs.deploy-books.outputs.summary }}" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.deploy-books.outputs.summary }}" == "" ]; then
          {
            echo "An unknown error has occurred, cannot display summary. It may be there were too many errors or warnings in the book build process."
            echo
            echo "- You can try building the books locally, or inspecting the workflow run logs to troubleshoot the issue."
          } >> $GITHUB_STEP_SUMMARY
        fi

        isdefault() {
          if [ "$1" == '' ]; then
            echo '(default value used)'
          else
            echo ''
          fi
        }

        # Display config var values
        {
          echo "### Repository configuration variables"
          echo "Variables can be set at ${{ format('{0}/{1}/settings/variables/actions', github.server_url, github.repository) }}"
          echo '```'
          echo "PRIMARY_BRANCH=$PRIMARY_BRANCH $(isdefault ${{ vars.PRIMARY_BRANCH }})"
          echo "BEHAVIOR_PRIMARY=$BEHAVIOR_PRIMARY $(isdefault ${{vars.BEHAVIOR_PRIMARY}})"
          echo "BRANCH_ALIASES=$BRANCH_ALIASES $(isdefault ${{ vars.BRANCH_ALIASES }})"
          echo "BRANCHES_TO_DEPLOY=$BRANCHES_TO_DEPLOY $(isdefault ${{ vars.BRANCHES_TO_DEPLOY }})"
          echo "BRANCHES_TO_PREPROCESS=$BRANCHES_TO_PREPROCESS $(isdefault ${{ vars.BRANCHES_TO_PREPROCESS }})"
          echo "BRANCHES_ARCHIVED=$BRANCHES_ARCHIVED $(isdefault ${{ vars.BRANCHES_ARCHIVED }})"
          echo '```'
        } >> $GITHUB_STEP_SUMMARY



permissions:
  contents: read
  pages: write
  id-token: write
